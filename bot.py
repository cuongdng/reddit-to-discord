import discord
from discord import colour
from discord import embeds
from discord import message
from discord import activity
from discord.channel import DMChannel
from discord.enums import ActivityType
from discord.ext import commands
from discord.ext.commands import Bot
import asyncpraw #Python Reddit API Wrapper
from configparser import ConfigParser
import asyncpg

config = ConfigParser()
config.read('config.cfg')

bot_owner = int(config['Discord']['owner_id']) #Addition controls for admin


client = discord.Client()
reddit = asyncpraw.Reddit(client_id=config['Reddit']['client_id'],
                          client_secret=config['Reddit']['client_secret'],
                          user_agent=config['Reddit']['user_agent'],
                          password=config['Reddit']['password'],
                          username=config['Reddit']['username'])

async def create_db_pool():
   client.pg_con = await asyncpg.create_pool(database=config['postgreSQL']['database'],
                                             user=config['postgreSQL']['user'],
                                             password=config['postgreSQL']['password'],
                                             host=config['postgreSQL']['host'])

# async def show_activity():
#    await client.change_presence(activity=discord.Activity(type=activity.CustomActivity(name='test')))

## Import database from PostgreSQL as dictionary
# async def db_to_dict():
#    global keyword
#    db = await client.pg_con.fetch("SELECT * FROM subreddit")
#    for i in db:
#       keyword.update({dict(i)['keyword'] : dict(i)['subreddit']})
#    print('Connected to Database')
   

## Check a subreddit exists or not
async def sub_exists(sub_name):
   exists = True
   try:
      await reddit.subreddit(sub_name, fetch=True)
   except:
      exists = False
   return exists

async def get_image_reddit(sub_name):
   global reddit
   sub = await reddit.subreddit(sub_name)
   random_post = await sub.random()
   if random_post.url.startswith('https://www.reddit.com/gallery'):
      post_galleries = random_post
      gallery = []
      for i in post_galleries.media_metadata.items():
         url = i[1]['p'][0]['u']
         url = url.split("?")[0].replace("preview", 'i')
         gallery.append(url)
      return gallery

   output = []
   output.append(random_post.url)
   return output


@client.event
async def on_ready():
   print('We have logged in as {0.user}'.format(client))
   await client.change_presence(status=discord.Status.online, activity=discord.Activity(type=discord.ActivityType.listening, name='.help'))
         
# LOGGING SEND TO HOST SERVER
         
# @client.event
# async def on_guild_join(guild):
#    main_logging = client.get_channel(host_server_id)
#     ## send to main logging channel
#    await main_logging.send("Joined **" + guild.name + "**\nID: " + str(guild.id) + "\nMembers: " + str(guild.member_count)) 
   
# @client.event
# async def on_guild_remove(guild):
#    main_logging = client.get_channel(host_server_id)
#    await main_logging.send("~~Removed~~ from **" + guild.name + "**")
#    await client.pg_con.execute("UPDATE subreddit SET guild_list = array_remove(guild_list, $1) WHERE $1 = ANY(guild_list);", guild.id)
 # END LOGGING   
   
   
@client.event
async def on_message(message):
   
   if message.author == client.user:
      return
   
   # I'm going to use this code for resist NSFW content, but maybe some people doesn't use Jinx for NSFW.
   # if not message.channel.nsfw:
   #    await message.add_reaction('‚ùå')
   #    await message.channel.send(content = 'H√£y g·ªçi Jinx trong k√™nh NSFW!', delete_after=2)
   #    return
   
   # activity_logging = client.get_channel(924953727771742220)
   
   if not isinstance(message.channel, DMChannel):
      guild_id = message.guild.id
   else:
      guild_id = 924953726794465301 ##Hard code, guild id of HQ Server
      
   tmp_dict = {}
   tmp_db = await client.pg_con.fetch("SELECT subreddit, keyword FROM subreddit WHERE $1 = ANY (guild_list)", guild_id)
   for i in tmp_db:
         tmp_dict.update({dict(i)['keyword'] : dict(i)['subreddit']})
   
   liked_emoji = 'üëç'
   agreed_emoji = '‚úÖ'
   refuse_emoji = '‚ùå'
   warning_emoji = '‚ö†Ô∏è'
   
   ###=====================================================================
   ### BELOW ARE FUNCTION FOR BOT OWNER                                  ==
   ###=====================================================================
   
   if message.content.startswith('.rmall'):
      if message.author.id == bot_owner:
         keyword_to_remove = message.content.split(' ')[1]
         await client.pg_con.execute("DELETE FROM subreddit WHERE keyword = $1", keyword_to_remove)
         await message.add_reaction(agreed_emoji)
      return
   
   if message.content.startswith('.rmlist'):
      if message.author.id == bot_owner:
         guild_id_to_remove = int(message.content.split(' ')[1])
         await client.pg_con.execute("UPDATE subreddit SET guild_list = array_remove(guild_list, $1) WHERE $1 = ANY(guild_list);", guild_id_to_remove)
         await message.add_reaction(agreed_emoji)
      return
         
   if message.content.startswith('.sendall'):
      if message.author.id == bot_owner:
         for guild in client.guilds:
            for _channel in guild.text_channels:
               try:
                  await _channel.send(message.content[9:])
                  await message.add_reaction(agreed_emoji)
               except Exception:
                  continue
               else:
                  break
      return
   
   
   if message.content == '.dashboard':
      if message.author.id == bot_owner:
         await message.add_reaction(agreed_emoji)
         await message.channel.send('Hello sir, here is the dashboard. Below is the current list of server that I\'m joining:')
         for guild in client.guilds:
            await message.channel.send(guild.name + ' | ' + str(guild.id))
      return
            
   global keyword
   msg = message.content
   msg = msg.lower()
   
   ###=====================================================================
   ### BELOW ARE FUNCTION FOR USER                                       ==
   ###=====================================================================
   
   ## Add subreddit
   if msg.startswith('.add'):
      try:
         sub_to_add = msg.split(' ')[1].lower()
         command_to_add = msg.split(' ')[2].lower()
      except:
         await message.add_reaction(refuse_emoji)
         await message.channel.send("Sai c√∫ ph√°p. `.add <subreddit> <keyword>`")
         return
      if not sub_to_add in tmp_dict.values():
         sub_check = await sub_exists(sub_to_add)
         if sub_check:
            for key, value in tmp_dict.items():
               if command_to_add == key:
                  await message.add_reaction(warning_emoji)    
                  await message.channel.send("T·ª´ kho√° b·∫°n ch·ªçn ƒë√£ ƒë∆∞·ª£c d√πng cho Subreddit: `" + value + "` | Keyword you selected have been used for this Subreddit: `" + value + "`")
                  return
            ## tmp_dict.update({command_to_add : sub_to_add}) ## Do I need this line?
            
            response = await client.pg_con.fetchrow("SELECT keyword FROM subreddit WHERE subreddit = $1;", sub_to_add)
            if response is None:
               await message.add_reaction(agreed_emoji)
            else:
               if response['keyword'] == command_to_add:
                  await message.add_reaction(agreed_emoji)
               else:  
                  await message.add_reaction(warning_emoji)
                  await message.channel.send("Subreddit n√†y ƒë√£ ƒë∆∞·ª£c th√™m t·∫°i database t·ªïng v·ªõi keyword: `" + response['keyword'] + "`, h√£y d√πng keyword n√†y ƒë·ªÉ g·ªçi.")
            await client.pg_con.execute("INSERT INTO subreddit VALUES ($1, $2, $3) ON CONFLICT ON CONSTRAINT subreddit_cn DO UPDATE SET guild_list = array(SELECT DISTINCT unnest(subreddit.guild_list || EXCLUDED.guild_list));", sub_to_add, command_to_add, {guild_id})
            # if message.author.id != bot_owner:
            #        await activity_logging.send('**'+ message.author.name + '** has use: *' + msg + '*')
         else:
            await message.add_reaction(refuse_emoji)
            await message.channel.send("Subreddit n√†y kh√¥ng t·ªìn t·∫°i | This subreddit doesn't exist")
      else:
         await message.add_reaction(warning_emoji)
         for key, value in tmp_dict.items():
            if sub_to_add == value:
               await message.channel.send("Subreddit n√†y ƒë√£ t·ªìn t·∫°i trong list v·ªõi t·ª´ kho√° `" + key + "` | This subreddit already exists with the keyword `" + key + "`")
               break
      return
   
   ## Remove subreddit
   if msg.startswith('.rm'):
      command_to_remove = msg.split(' ')[1]
      if command_to_remove in tmp_dict:
         await message.add_reaction(agreed_emoji)
         await client.pg_con.execute("UPDATE subreddit SET guild_list = array_remove(guild_list, $1) WHERE keyword = $2;", guild_id, command_to_remove)
         await client.pg_con.execute("DELETE FROM subreddit WHERE guild_list = '{}';")
         # if message.author.id != bot_owner:
         #       await activity_logging.send('**'+ message.author.name + '** has use: *' + msg + '*')
      else:
         await message.add_reaction(refuse_emoji)
         await message.channel.send("T·ª´ kho√° n√†y kh√¥ng t·ªìn t·∫°i | This keyword doesn't exist")
      return

   ## Show list of keyword
   if msg == '.list':
      await message.add_reaction(liked_emoji)
      list_embed = discord.Embed(colour = 0xAA99FF, title='Subreddit List', description='**Keyword** - Subreddit\nD√πng c√°c **keyword** ƒë·ªÉ g·ªçi Jinx')
      await message.channel.send(embed = list_embed)
      
      string = "\n".join('**{}** - {}'.format(k, v) for k, v in tmp_dict.items())
       
      string_length = len(string)
      if string_length == 0:
         return
      if string_length < 2000:
         await message.channel.send(string)
      else:
         max_index = 2000
         index = 0
         while index < (string_length - max_index):
            while (string[max_index] != '\n'):
                   max_index = max_index - 1
            posted_string = string[index:max_index]
            await message.channel.send(posted_string)
            index = index + max_index
         posted_string = string[index:]   
         await message.channel.send(posted_string)
      # if message.author.id != bot_owner:
      #          await activity_logging.send('**'+ message.author.name + '** has use: *' + msg + '*')
      return
   
   ## About bot
   if msg == '.about':
      await message.add_reaction(liked_emoji)
      about_embed = discord.Embed(title='‚ñ∂Ô∏è About Jinx ‚óÄÔ∏è', description='Jinx c√≥ kh·∫£ nƒÉng l·∫•y ng·∫´u nhi√™n m·ªôt (ho·∫∑c nhi·ªÅu) b·ª©c ·∫£nh, gif, video link,... t·ª´ m·ªôt Subreddit c√≥ tr√™n Reddit', colour=0xAA99FF)
      about_embed.add_field(name='üíå L·ªùi nh·∫Øn nh·ªß', value='Cu·ªôc s·ªëng l√† v·∫≠y, c√≥ r·∫•t nhi·ªÅu chuy·ªán x·∫£y ra kh√¥ng nh∆∞ ch√∫ng ta mong mu·ªën. Jinx c≈©ng v·∫≠y, c√≥ ƒë√¥i khi s·∫Ω c·∫ßn kho·∫£ng v√†i gi√¢y ƒë·ªÉ Jinx c√≥ th·ªÉ ph·∫£n h·ªìi b·∫°n. Ho·∫∑c th·∫≠m ch√≠ Jinx s·∫Ω kh√¥ng ph·∫£n h·ªìi, m√¨nh v·∫´n ƒëang trong qu√° tr√¨nh c·∫£i ti·∫øn kh·∫£ nƒÉng c·ªßa Jinx. Thong th·∫£ nh√©!', inline=False)
      about_embed.add_field(name='üí° Tip1Ô∏è‚É£', value='ƒê·ªÉ Jinx ph√°t huy h·∫øt s·ª©c m·∫°nh v√† ƒëem l·∫°i nh·ªØng ƒëi·ªÅu tuy·ªát nh·∫•t cho b·∫°n, h√£y t√¨m hi·ªÉu v·ªÅ Reddit')
      about_embed.add_field(name='üí° Tip2Ô∏è‚É£', value='N·∫øu b·∫°n g·ªçi nh·ªØng n·ªôi dung NSFW, h√£y g·ªçi trong k√™nh chat c√≥ g·∫Øn NSFW, ƒëi·ªÅu n√†y s·∫Ω ƒë·∫£m b·∫£o an to√†n cho server c·ªßa b·∫°n')
      about_embed.set_footer(text='Li√™n h·ªá: cuongdn.sun@gmail.com - Phi√™n b·∫£n c·∫≠p nh·∫≠t 21/1/2022')
      await message.channel.send(embed = about_embed)
      # if message.author.id != bot_owner:
      #       await activity_logging.send('**'+ message.author.name + '** has use: *' + msg + '*')
      return
         
   if msg == '.help':
      await message.add_reaction(liked_emoji)
      help_embed = discord.Embed(title='‚ñ∂Ô∏è Help ‚óÄÔ∏è', description='Danh s√°ch l·ªánh v√† m·ªôt s·ªë th·∫Øc m·∫Øc b·∫°n c√≥ th·ªÉ g·∫∑p', colour=0xAA99FF)
      help_embed.add_field(name='.about', value='T√¨m hi·ªÉu v·ªÅ Jinx', inline=False)
      help_embed.add_field(name='.list', value='Hi·ªÉn th·ªã to√†n b·ªô c√°c keyword v√† t√™n Subreddit t∆∞∆°ng ·ª©ng t·∫°i server c·ªßa b·∫°n', inline=False)
      help_embed.add_field(name='.add <subreddit> <keyword>', value='Th√™m m·ªôt keyword m·ªõi v√†o list \nV√≠ d·ª•: Th√™m Subreddit: Memes_Of_The_Dank v·ªõi t·ª´ kho√° dankmeme:\n *.add Meme_Of_The_Dank dankmeme*', inline=False)
      help_embed.add_field(name='.addnsfw', value='Add list NSFW', inline=False)
      help_embed.add_field(name='.rm <keyword>', value='Xo√° m·ªôt keyword kh·ªèi list \nV√≠ d·ª•: Mu·ªën xo√° keyword dankmeme: *.rm dankmeme*', inline=False)
      help_embed.add_field(name='===========', value='M·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p', inline=True)
      help_embed.add_field(name='Keyword l√† g√¨?', value='Ch·ªâ ƒë∆°n gi·∫£n l√† m·ªôt c√°ch g·ªçi kh√°c cho c√°c l·ªánh b·∫°n d√πng ƒë·ªÉ g·ªçi Jinx. Nh·ªØng keyword n√†y ƒë∆∞·ª£c d√πng ƒë·ªÉ g·ªçi c√°c n·ªôi dung t∆∞∆°ng ·ª©ng v·ªõi c√°c Subreddit.', inline=False)
      help_embed.add_field(name='Subreddit l√† g√¨?', value='C√°c m·ª•c n·ªôi dung ƒë∆∞·ª£c chia theo nh·ªØng lƒ©nh v·ª±c kh√°c nhau c·ªßa Reddit. ƒê·ªÉ hi·ªÉu r√µ h∆°n, b·∫°n h√£y t√¨m hi·ªÉu v·ªÅ Reddit.', inline=False)
      help_embed.add_field(name='M√¨nh c√≥ th·ªÉ tu·ª≥ √Ω th√™m v√† xo√° danh s√°ch keyword kh√¥ng?', value='C√≥, b·∫°n h√£y s·ª≠ d·ª•ng l·ªánh .add v√† .remove', inline=False)
      help_embed.add_field(name='Khi mu·ªën g·ªçi n·ªôi dung t·ª´ Subreddit n√†o ƒë√≥, m√¨nh ph·∫£i l√†m g√¨?', value='B·∫°n ch·ªâ c·∫ßn chat keyword t∆∞∆°ng ·ª©ng v·ªõi Subreddit mu·ªën g·ªçi. Keyword kh√¥ng c·∫ßn b·∫Øt ƒë·∫ßu b·∫±ng d·∫•u "."', inline=False)
      help_embed.add_field(name='V·∫≠y "." ƒë∆∞·ª£c s·ª≠ d·ª•ng khi n√†o?', value='"." l√† ti·ªÅn t·ªë ƒë∆∞·ª£c d√πng khi b·∫°n mu·ªën g·ªçi c√°c l·ªánh c∆° b·∫£n c·ªßa Jinx, ƒë√£ ƒë∆∞·ª£c n√™u ƒë·∫ßy ƒë·ªß ph√≠a tr√™n.', inline=False)
      help_embed.add_field(name='T·∫°i sao trong m·ªôt l·∫ßn g·ªçi, c√≥ l√∫c Jinx ch·ªâ g·ª≠i v·ªÅ m·ªôt ·∫£nh nh∆∞ng c√≥ l√∫c l·∫°i r·∫•t nhi·ªÅu ·∫£nh?', value='Do ƒë·ªãnh d·∫°ng b√†i ƒëƒÉng g·ªëc m√† Jinx l·∫•y ƒë∆∞·ª£c, ƒë√≥ c√≥ th·ªÉ l√† m·ªôt post v·ªõi m·ªôt b·ª©c ·∫£nh ƒë∆°n, ho·∫∑c m·ªôt gallery v·ªõi nhi·ªÅu ·∫£nh.', inline=False)
      help_embed.add_field(name='ƒê√¥i khi Jinx l·∫•y v·ªÅ nh·ªØng n·ªôi dung tr√πng l·∫∑p v·ªõi nh·ªØng l·∫ßn g·ªçi tr∆∞·ªõc', value='T·∫•t nhi√™n r·ªìi, ng·∫´u nhi√™n m√†!', inline=False)
      await message.channel.send(embed = help_embed)
      # if message.author.id != bot_owner:
      #       await activity_logging.send('**'+ message.author.name + '** has use: *' + msg + '*')
      return
         
   ## Send image
   if msg in tmp_dict.keys():
      try:
         img_url = await get_image_reddit(tmp_dict[msg])
         for i in img_url:
               await message.channel.send(i)
         await message.add_reaction(liked_emoji)
         # if message.author.id != bot_owner:
         #       await activity_logging.send('**'+ message.author.name + '** has call: *' + msg + '*')
      except:
         await message.add_reaction(refuse_emoji)
         await message.channel.send("Do m·ªôt s·ªë ch√≠nh s√°ch c·ªßa Subreddit n√†y, Jinx kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu | Due to this Subreddit's policy, Jinx can't get data")
      return
      
# client.loop.run_until_complete(show_activity())
client.loop.run_until_complete(create_db_pool())
client.run(config['Discord']['discord_token'])
